-- skins.lua

local Tabs = _G.Tabs
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- SwordDataCollector.lua
-- Global SwordData table

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function collectSwordNames()
	local swordNames = {}
	local assets = ReplicatedStorage:FindFirstChild("Assets")
	if assets then
		local swordsFolder = assets:FindFirstChild("Swords")
		if swordsFolder then
			for _, model in swordsFolder:GetChildren() do
				if model:IsA("Model") then
					table.insert(swordNames, model.Name)
				end
			end
		end
	end
	return swordNames
end

SwordData = collectSwordNames()

local assets = ReplicatedStorage:FindFirstChild("Assets")
if assets then
	local swordsFolder = assets:FindFirstChild("Swords")
	if swordsFolder then
		swordsFolder.ChildAdded:Connect(function()
			SwordData = collectSwordNames()
		end)
		swordsFolder.ChildRemoved:Connect(function()
			SwordData = collectSwordNames()
		end)
	end
end

Tabs.skins:AddSection("Sword")

task.spawn(function()
	task.wait(3)
	createSword()
end)

function createSword()
	Tabs.skins:AddDropdown("SwordSelector", {
		Title = "Select sword",
		Values = SwordData,
		Default = "Default",
		Callback = function(Value)
			local player = game.Players.LocalPlayer
			local character = player.Character or player.CharacterAdded:Wait()
			local username = player.Name
			local modelName = (Value)
			print(username .. " SwordWelds")

			for _, folder in pairs(workspace:GetChildren()) do
				if folder:IsA("Folder") and folder.Name == username .. " SwordWelds" then
					folder:Destroy()
				end
			end

			local replicatedStorage = game:GetService("ReplicatedStorage")
			local swordModel = replicatedStorage.Assets.Swords:FindFirstChild(modelName)

			for _, swordi in pairs(character:GetChildren()) do
				if swordi:IsA("Part") and swordi.Name == Sword then
					swordi:Destroy()
				end
			end

			if swordModel then
				local sword = swordModel:FindFirstChild("Sword"):Clone()
				local offsetValue = swordModel:FindFirstChild("Offset").Value

				local userFolder = character
				if userFolder then
					local existingSword = userFolder:FindFirstChild("Sword")
					if existingSword then
						existingSword:Destroy()
					end
				end

				sword.Parent = userFolder

				local weld = Instance.new("Weld")
				weld.Part0 = sword
				weld.Part1 = character:FindFirstChild("rtool")
				weld.C1 = offsetValue
				weld.Parent = sword

				sword.Anchored = false
			end
		end
	})
end

-- Skybox data
local SKYBOXES = {
	["1"] = {
		SkyboxBk = "rbxassetid://15502324143",
		SkyboxDn = "rbxassetid://15502324962",
		SkyboxFt = "rbxassetid://15502325676",
		SkyboxLf = "rbxassetid://15502326432",
		SkyboxRt = "rbxassetid://15502327161",
		SkyboxUp = "rbxassetid://15502328272",
		CelestialBodiesShown = false,
		StarCount = 3000
	},
	["2"] = {
		SkyboxBk = "rbxassetid://12216109205",
		SkyboxDn = "rbxassetid://12216109875",
		SkyboxFt = "rbxassetid://12216109489",
		SkyboxLf = "rbxassetid://12216110170",
		SkyboxRt = "rbxassetid://12216110471",
		SkyboxUp = "rbxassetid://12216108877",
		CelestialBodiesShown = true,
		StarCount = 3000
	},
	["3"] = {
		SkyboxBk = "http://www.roblox.com/asset/?id=15670828196",
		SkyboxDn = "http://www.roblox.com/asset/?id=15670829373",
		SkyboxFt = "http://www.roblox.com/asset/?id=15670830476",
		SkyboxLf = "http://www.roblox.com/asset/?id=15670831662",
		SkyboxRt = "http://www.roblox.com/asset/?id=15670833256",
		SkyboxUp = "http://www.roblox.com/asset/?id=15670834206",
		CelestialBodiesShown = true,
		StarCount = 3000
	},
	["4"] = {
		SkyboxBk = "http://www.roblox.com/asset/?id=150939216",
		SkyboxDn = "http://www.roblox.com/asset/?id=150939223",
		SkyboxFt = "http://www.roblox.com/asset/?id=150939233",
		SkyboxLf = "http://www.roblox.com/asset/?id=150939244",
		SkyboxRt = "http://www.roblox.com/asset/?id=150939249",
		SkyboxUp = "http://www.roblox.com/asset/?id=150939252",
		CelestialBodiesShown = true,
		StarCount = 3000
	},
	["5"] = {
		SkyboxBk = "http://www.roblox.com/asset/?id=1263691193",
		SkyboxDn = "http://www.roblox.com/asset/?id=1263691193",
		SkyboxFt = "http://www.roblox.com/asset/?id=1263691193",
		SkyboxLf = "http://www.roblox.com/asset/?id=1263691193",
		SkyboxRt = "http://www.roblox.com/asset/?id=1263691193",
		SkyboxUp = "http://www.roblox.com/asset/?id=1263691193",
		CelestialBodiesShown = true,
		StarCount = 3000
	},
	["6"] = {
		SkyboxBk = "rbxassetid://12635309703",
		SkyboxDn = "rbxassetid://12635311686",
		SkyboxFt = "rbxassetid://12635312870",
		SkyboxLf = "rbxassetid://12635313718",
		SkyboxRt = "rbxassetid://12635315817",
		SkyboxUp = "rbxassetid://12635316856",
		CelestialBodiesShown = true,
		SunAngularSize = 11,
		StarCount = 1334
	}
}

local skyboxOptions = {"Default"}
for n, _ in pairs(SKYBOXES) do table.insert(skyboxOptions, n) end

local selectedSkybox = "Default"
local skyboxLoopConnection = nil
local skyboxEnabled = false

local function applySkybox(skyboxName)
	local data = SKYBOXES[skyboxName]
	if not data then return end
	local Lighting = game:GetService("Lighting")
	local TweenService = game:GetService("TweenService")
	local sky = Lighting:FindFirstChildOfClass("Sky")
	if not sky then sky = Instance.new("Sky") sky.Parent = Lighting end
	local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad)
	sky.SkyboxBk = data.SkyboxBk or sky.SkyboxBk
	sky.SkyboxDn = data.SkyboxDn or sky.SkyboxDn
	sky.SkyboxFt = data.SkyboxFt or sky.SkyboxFt
	sky.SkyboxLf = data.SkyboxLf or sky.SkyboxLf
	sky.SkyboxRt = data.SkyboxRt or sky.SkyboxRt
	sky.SkyboxUp = data.SkyboxUp or sky.SkyboxUp
	if data.CelestialBodiesShown ~= nil then sky.CelestialBodiesShown = data.CelestialBodiesShown end
	if data.StarCount ~= nil and sky.StarCount ~= nil then
		local tween = TweenService:Create(sky, tweenInfo, {StarCount = data.StarCount})
		tween:Play()
	end
	if data.SunAngularSize ~= nil and sky.SunAngularSize ~= nil then
		local tween = TweenService:Create(sky, tweenInfo, {SunAngularSize = data.SunAngularSize})
		tween:Play()
	end
	if data.MoonAngularSize ~= nil and sky.MoonAngularSize ~= nil then
		local tween = TweenService:Create(sky, tweenInfo, {MoonAngularSize = data.MoonAngularSize})
		tween:Play()
	end
	if data.Exposure ~= nil and sky.Exposure ~= nil then
		local tween = TweenService:Create(sky, tweenInfo, {Exposure = data.Exposure})
		tween:Play()
	end
end

local function startSkyboxLoop()
	if skyboxLoopConnection then
		skyboxLoopConnection:Disconnect()
	end
	if not skyboxEnabled or selectedSkybox == "Default" then return end
	skyboxLoopConnection = game:GetService("RunService").Heartbeat:Connect(function()
		applySkybox(selectedSkybox)
	end)
end

local function stopSkyboxLoop()
	if skyboxLoopConnection then
		skyboxLoopConnection:Disconnect()
		skyboxLoopConnection = nil
	end
end

local function resetToDefaultSkybox()
	local Lighting = game:GetService("Lighting")
	local sky = Lighting:FindFirstChildOfClass("Sky")
	if sky then
		sky:Destroy()
	end
end

Tabs.skins:AddSection("Skybox")

Tabs.skins:AddToggle("SkyboxToggle", {
	Title = "Enable Custom Skybox",
	Default = false,
	Callback = function(Value)
		skyboxEnabled = Value
		if Value then
			if selectedSkybox ~= "Default" then startSkyboxLoop() end
		else
			stopSkyboxLoop()
			resetToDefaultSkybox()
		end
	end
})

Tabs.skins:AddDropdown("SkyboxSelector", {
	Title = "Select skybox", Values = skyboxOptions, Default = "Default",
	Callback = function(Value)
		selectedSkybox = Value
		if skyboxEnabled then
			stopSkyboxLoop()
			if Value == "Default" then resetToDefaultSkybox() else startSkyboxLoop() end
		end
	end
})

Tabs.skins:AddSection("Motion Blur")

local motionBlurEnabled = false
local blurAmount = 15
local blurAmplifier = 5
local motionBlur = nil
local lastVector = nil
local motionBlurConnection = nil

Tabs.skins:AddToggle("MotionBlurToggle", {
	Title = "Motion Blur",
	Default = false,
	Callback = function(Value)
		motionBlurEnabled = Value
		if Value then
			local cam = workspace.CurrentCamera
			if cam then motionBlur = Instance.new("BlurEffect", cam) lastVector = cam.CFrame.LookVector end
			motionBlurConnection = game:GetService("RunService").Heartbeat:Connect(function()
				local cam = workspace.CurrentCamera
				if not cam or not motionBlur or motionBlur.Parent == nil then
					motionBlur = Instance.new("BlurEffect", cam)
					lastVector = cam.CFrame.LookVector
					return
				end
				local mag = (cam.CFrame.LookVector - lastVector).magnitude
				motionBlur.Size = math.abs(mag) * blurAmount * blurAmplifier / 2
				lastVector = cam.CFrame.LookVector
			end)
		else
			if motionBlur and motionBlur.Parent then motionBlur:Destroy() motionBlur = nil end
			if motionBlurConnection then motionBlurConnection:Disconnect() motionBlurConnection = nil end
		end
	end
})

Tabs.skins:AddSlider("BlurAmountSlider", {
	Title = "Blur Amount",
	Description = "Настройка интенсивности размытия",
	Default = 15,
	Min = 1,
	Max = 200,
	Rounding = 0,
	Callback = function(Value) blurAmount = Value end
})

Tabs.skins:AddSlider("BlurAmplifierSlider", {
	Title = "Blur Amplifier",
	Description = "Настройка усилителя размытия",
	Default = 5,
	Min = 1,
	Max = 50,
	Rounding = 0,
	Callback = function(Value) blurAmplifier = Value end
})

workspace.Changed:Connect(function(property)
	if property == "CurrentCamera" and motionBlurEnabled then
		local cam = workspace.CurrentCamera
		if motionBlur and motionBlur.Parent then motionBlur.Parent = cam else
			motionBlur = Instance.new("BlurEffect", cam)
			lastVector = cam.CFrame.LookVector
		end
	end
end)

function applySavedSettings()
	if skyboxEnabled and selectedSkybox ~= "Default" then startSkyboxLoop() end
	if motionBlurEnabled then
		local cam = workspace.CurrentCamera
		if cam then motionBlur = Instance.new("BlurEffect", cam) lastVector = cam.CFrame.LookVector end
		motionBlurConnection = game:GetService("RunService").Heartbeat:Connect(function()
			local cam = workspace.CurrentCamera
			if not cam or not motionBlur or motionBlur.Parent == nil then
				motionBlur = Instance.new("BlurEffect", cam)
				lastVector = cam.CFrame.LookVector
				return
			end
			local mag = (cam.CFrame.LookVector - lastVector).magnitude
			motionBlur.Size = math.abs(mag) * blurAmount * blurAmplifier / 2
			lastVector = cam.CFrame.LookVector
		end)
	end
end

task.spawn(function()
	task.wait(1)
	applySavedSettings()
end)
